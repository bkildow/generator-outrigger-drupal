<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Perform nightly maintenance and checks against the develop branch. This includes clean database generation and module update checks.</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>5</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REF</name>
          <description>Git branch, tag, or commit revision to build.</description>
          <defaultValue>develop</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url><%= gitRepoUrl %></url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GIT_REF}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 8 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env bash
export DOCKER_ENV=int

# Break down the Docker environment and remove generated files.
teardown() {
  docker-compose -f docker-compose.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} stop || true
  docker-compose -f docker-compose.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} rm -f || true
  # Now that www container is stopped it's safe to clean up.
  # dev-support does this for the cleanest possible checkup.
  # git clean -fd
}

# Handler for errors or other interruptions.
cancel() {
  echo &quot;$JOB_NAME: Error: Line $1: $2&quot;
  # Since CI runs teardown on exit it is not needed here.
  # teardown
  exit 34
}

# End-of-job cleanup.
complete() {
  ret=$1
  [ &quot;$ret&quot; -eq 0 ] || echo >&amp;2 &quot;$JOB_NAME: aborted ($ret)&quot;
  teardown
}

# Abort build step on errors.
trap &apos;cancel $LINENO $BASH_COMMAND&apos; ERR SIGINT SIGTERM SIGQUIT SIGHUP
# Clean up on program termination.
trap &apos;complete $?&apos; EXIT

teardown

# Set up and install site
bash bin/start.sh ${DOCKER_ENV}

# Run cron for maximized database freshness.
docker-compose -f build.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} run drush cron

# Export database. This process preserves the latest 5 databases.
DATE=$(date +%Y-%m-%d_%H:%M:%S)
docker-compose -f build.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} run cli bash bin/db-export.sh nightlies/$DATE.sql

# Run Behat Tests
# Highly recommended, but not always used on projects.
# docker-compose -f build.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} run cli sh -c &quot;GDT_DOMAIN=<%= virtualHost %> grunt test --force --timer&quot;

# Perform a scan for module updates.
docker-compose -f build.${DOCKER_ENV}.yml -p <%= projectName %>_${DOCKER_ENV} run cli bash bin/update-scanner.sh
</command>
    </hudson.tasks.Shell>
  </builders>
  <% if (flowdockApiKey) { %><publishers>
    <com.flowdock.jenkins.FlowdockNotifier plugin="jenkins-flowdock-plugin@1.1.8">
      <flowToken><%= flowdockApiKey %></flowToken>
      <notificationTags>dev-support, int</notificationTags>
      <chatNotification>false</chatNotification>
      <notifyMap>
        <entry>
          <com.flowdock.jenkins.BuildResult>FIXED</com.flowdock.jenkins.BuildResult>
          <boolean>true</boolean>
        </entry>
        <entry>
          <com.flowdock.jenkins.BuildResult>UNSTABLE</com.flowdock.jenkins.BuildResult>
          <boolean>false</boolean>
        </entry>
        <entry>
          <com.flowdock.jenkins.BuildResult>NOT_BUILT</com.flowdock.jenkins.BuildResult>
          <boolean>false</boolean>
        </entry>
        <entry>
          <com.flowdock.jenkins.BuildResult>SUCCESS</com.flowdock.jenkins.BuildResult>
          <boolean>true</boolean>
        </entry>
        <entry>
          <com.flowdock.jenkins.BuildResult>ABORTED</com.flowdock.jenkins.BuildResult>
          <boolean>false</boolean>
        </entry>
        <entry>
          <com.flowdock.jenkins.BuildResult>FAILURE</com.flowdock.jenkins.BuildResult>
          <boolean>true</boolean>
        </entry>
      </notifyMap>
      <notifySuccess>true</notifySuccess>
      <notifyFailure>true</notifyFailure>
      <notifyFixed>true</notifyFixed>
      <notifyUnstable>false</notifyUnstable>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
    </com.flowdock.jenkins.FlowdockNotifier>
  </publishers><% } else { %><publishers/><% } %>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.3">
      <template>#${BUILD_NUMBER} - ${GIT_BRANCH}</template>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
