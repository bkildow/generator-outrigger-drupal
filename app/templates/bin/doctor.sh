#!/usr/bin/env bash
##
# Doctor
#
# Evaluate the state of the project setup and report on problems.
##

CALLPATH=`dirname $0`
source "$CALLPATH/framework.sh"

STATUS=0

SUCCESS='echoInfo'
WARNING='echoWarn'
ERROR='echoError'

flag() {
  if [ "$1" == "$ERROR" ]; then
    STATUS=1
  fi
  echo -en "\t"
  $1 "$2 $3\n"
}

assertCmd() {
  if [ -z $(which $1) ]; then
    flag $2 $1 'command not found.'
  else
    flag $SUCCESS $1 'found'
  fi
}

assertFile() {
  if [ -f "$1" ]; then
    flag $SUCCESS $1 'found'
  else
    flag $2 $1 'file not found.'
  fi
}

assertDir() {
  if [ -d "$1" ]; then
    flag $SUCCESS $1 'found'
  else
    flag $2 $1 'directory not found.'
  fi
}

assert() {
  if [ -z "$1" ]; then
    flag $3 $2 "not running"
  else
    flag $SUCCESS $2 "running"
  fi
}

if [ -z "$1" ] || [ "$1" == 'devtools' ]; then
  heading 'Docker Utilities'
  assertCmd 'devtools' $WARNING
  assertCmd 'docker' $ERROR
  assertCmd 'docker-compose' $ERROR
  assertCmd 'docker-machine' $ERROR
  assert $(docker-machine active) 'devtools' $WARNING
fi

if [ -z "$1" ] || [ "$1" == 'generator' ]; then
  heading 'Code Generated with Yo P2'
  assertDir 'src' $ERROR
  assertFile 'package.json' $ERROR
  assertFile 'composer.json' $ERROR
  assertFile 'docker-compose.yml' $ERROR
  assertFile 'build.yml' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'requirements' ]; then
  heading 'Project Requirements Met'
  assertDir 'node_modules' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'gdt' ]; then
  heading 'Code Generated by Grunt Drupal Tasks Build Process'
  assertDir 'build' $ERROR
  assertDir 'build/html' $ERROR
  assertFile 'build/html/index.php' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'docker-machine' ]; then
  heading 'Docker-Machine Functionality'
  docker-compose -f build.yml run base ls /var/www/src > /dev/null
  assert $? 'code volume-mount' $ERROR
fi

if [ "$STATUS" -gt 0 ]; then
  echo 'Run "devtools doctor" to address Docker problems.'
fi

exit $STATUS
