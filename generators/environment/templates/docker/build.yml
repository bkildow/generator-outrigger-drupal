##
# Build and command-line operations containers for your local environment.
#
# By setting your local DOCKER_ENV environment variable you can spin up
# multiple environments. Keep in mind you should also vary the docker-compose
# --project-name as needed. The `bin/start.sh` script sets a project name of
# <%= machineName %>_${DOCKER_ENV:-local}.
#
# @see https://docs.docker.com/compose/reference/overview/
# @see https://docs.docker.com/compose/compose-file/compose-file-v2/
##
version: '3.1'

services:

  # Container for starting a an interactive command-line interface.
  #
  # Use this for "remote terminal session" style development workflows, or append
  # other shell commands to run one-off commands not brokered by another service.
  #
  # Usage:
  # - docker-compose -f build.yml run --rm cli
  # - docker-compose -f build.yml run --rm cli ls vendor
  cli:
    image: <%= buildImage %>
    command: /bin/bash
    entrypoint: [ "/init" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6
      <% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      <% } -%>
      # Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      - /data/<%= projectName %>/cache/drush:/root/.drush/cache
      - /data/<%= projectName %>/cache/behat_gherkin:/tmp/behat_gherkin_cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
      # Preserve BASH history across build container runs.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/bash:/root/bash
    working_dir: /var/www

  # Container for running composer in the repo root.
  #
  # Usage: docker-compose -f build.yml run --rm composer <command>
  composer:
    image: <%= buildImage %>
    command: ""
    entrypoint: [ "/init", "composer", "--ansi" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      <% } -%># Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
    working_dir: /var/www

  # Container for running drush in the docroot.
  #
  # Usage: docker-compose -f build.yml run --rm drush <command>
  # Where <command> is a direct drush command like cache-rebuild
  drush:
    image: <%= buildImage %>
    command: ""
    entrypoint: [ "/init", "drush", "@<%= projectName %>" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      <% } -%># Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      - /data/<%= projectName %>/cache/drush:/root/.drush/cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
    working_dir: /var/www/build/html

  # Container for running Drupal Console in the docroot.
  #
  # Usage: docker-compose -f build.yml run --rm drupal <command>
  # Where <command> is a direct drupal command like generate
  #
  # Note: Only works if the project includes Drupal Console as a composer dependency.
  drupal:
    image: <%= buildImage %>
    command: ""
    entrypoint: [ "/init", "/var/www/vendor/bin/drupal", "--ansi" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      <% } -%># Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      - /data/<%= projectName %>/cache/drush:/root/.drush/cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
    working_dir: /var/www/build/html

  <% if (usePLS) { %>
  # Container to start theme compilation and watch command from the theme folder.
  #
  # In the case of Pattern-Lab Starter based themes, this is a wrapper for gulp
  # in the same way the 'grunt' service above is a "wrapper" for grunt. You may
  # pass other gulp arguments along.
  #
  # If there are multiple themes in the project, you should duplicate this and
  # change the name to match the theme name to preserve the convenience for all
  # themes.
  #
  # Usage:
  # - docker-compose -f build.yml run --rm theme
  # - docker-compose -f build.yml run --rm theme compile
  theme:
    image: <%= buildImage %>
    command: ""
    entrypoint: [ "/init", "./node_modules/.bin/gulp" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1<% } -%>
      # Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      com.dnsdock.name: theme
      com.dnsdock.image: <%= domain %>
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
    working_dir: /var/www/<%= themePath %>/<%= themeName %>

  <% } -%>
  # Container for running grunt in the repo root.
  #
  # Usage: docker-compose -f build.yml run --rm grunt <command>
  grunt:
    image: <%= buildImage %>
    command: ""
    entrypoint: [ "/init", "grunt" ]
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      <% } -%># Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>
    external_links:
      - <%= db.docker.extLink %><% if (cache.external) { %><%= cache.docker.extLink %><% } %>
    labels:
      outrigger.project: <%= projectName %>
    network_mode: "bridge"
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      - /data/<%= projectName %>/cache/drush:/root/.drush/cache
      - /data/<%= projectName %>/cache/behat_gherkin:/tmp/behat_gherkin_cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
    working_dir: /var/www

  # Base service definition for Local environment.
  #
  # This is not a fully operational build container, lacking access to other
  # services such as the database or cache needed to properly interact with the
  # application.
  #
  # Uses for this container include filesystem operations. For example:
  #
  # Usage:
  # - docker-compose -f build.yml run --rm base 'rm -Rf node_modules'
  base:
    image: <%= buildImage %>
    network_mode: "bridge"
    entrypoint: [ "/init" ]
    working_dir: /var/www
    command: /bin/bash
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - <%= projectName %>-sync:/var/www/
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/<%= projectName %>/cache:/root/.cache
      - /data/<%= projectName %>/cache/drush:/root/.drush/cache
      - /data/<%= projectName %>/cache/behat_gherkin:/tmp/behat_gherkin_cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
      # Preserve BASH history across build container runs.
      - /data/<%= projectName %>/${DOCKER_ENV:-local}/bash:/root/bash
    labels:
      outrigger.project: <%= projectName %>
    environment:
      APP_DOMAIN: <%= host.local %>
      GDT_DOMAIN: <%= host.local %>
      # Check https://hub.docker.com/r/phase2/devtools-build/ for other Node version options.
      NODE_VERSION: 6<% if (usePLS) { %>
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1<% } -%>
      # Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV:-local}
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: <%= host.local %><% } %>

volumes:
  # This defines the filesystem synchronization volume used for application
  # code by the web container.
  # @see <doc-url>
  <%= projectName %>-sync:
    external: true
