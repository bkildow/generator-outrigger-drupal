##
# Build and command-line operations containers for Outrigger Cloud hosted Docker environments.
#
# In-line documentation assumes the "Integration" or 'int' environment, in practice
# any environment name can be used. Standard names also include: Development (dev),
# Testing (qa), and Review/Milestone (ms).
#
# "Dev Cloud" is the name of the internal Phase2 development infrastructure.
#
# To ensure this works as expected for multiple environments, both environment
# settings must be carefully respected in *every* command invocation:
#
# * The `DOCKER_ENV` environment variable which is used as a template parameter for
#   how this configuration is used.
# * The -p|--project-name option for Docker Compose, which uses the provided name
#   in lieu of deriving key Docker namespacing from whatever the current directory
#   happens to be named.
#
# @see https://docs.docker.com/compose/reference/overview/
# @see https://docs.docker.com/compose/compose-file/compose-file-v2/
##
version: '3.1'

services:

  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm cli
  cli:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm composer install
  composer:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm drush
  drush:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm drupal
  drupal:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  <% if (usePLS) { %>
  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm theme
  theme:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  <% } -%>
  # Adjust the grunt service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm grunt
  grunt:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>

  # Adjust the base service definition for devcloud.
  #
  # Usage Example:
  # DOCKER_ENV=int docker-compose -f build.yml -f build.devcloud.yml -p <%= machineName %>_int run --rm base 'rm -Rf node_modules'
  base:
    volumes:
      # Code volume mount.
      - .:/var/www
      # DevCloud backups are homed in /data/backups directory.
      - /data/backups/<%= projectName %>/${DOCKER_ENV}:/opt/backups
    environment:
      APP_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      GDT_DOMAIN: ${DOCKER_ENV}-<%= host.devcloud %>
      <% if (proxy.exists) { %>PROXY_VIRTUAL_HOST: ${DOCKER_ENV}-<%= host.devcloud %><% } %>
